---
- name: Create directory for Ansible facts
  ansible.builtin.file:
    mode: "0755"
    owner: root
    path: "/etc/ansible/facts.d"
    state: directory

- name: Template a list of Ansible-managed users
  register: users_fact_installed
  ansible.builtin.copy:
    owner: root
    mode: "0644"
    dest: "/etc/ansible/facts.d/users.fact"
    content: "{{ system.users.keys() | list | to_json }}"

- name: Update facts
  when: users_fact_installed
  changed_when: yes
  ansible.builtin.setup: {}

- name: Compare the user variables with the users fact on the system
  ansible.builtin.set_fact:
    old_users_var: "{{ (ansible_local.users | default([]) | difference(system.users.keys() | list)) + system.users_delete }}"

- name: Delete the users specified for deletion
  when: (old_users_var | length > 0) and ansible_system != 'FreeBSD'
  block:
    - name: Fail if all users are about to be deleted
      when: system.users | length == 0
      ansible.builtin.fail:
        msg: |
          system['users'] is empty, which means that you're about to delete ALL USERS on your target host
          This is very dangerous and will most likely break your system.

    - name: Fail if the current Ansible user is about to get deleted
      when: (ansible_user | default("")) in old_users_var
      ansible.builtin.fail:
        msg: |
          User {{ ansible_user }} can not be removed, since it's being used to run the current Ansible playbook
          Please run the playbook with a different user to remove the user {{ ansible_user }}

    - name: Remove old users
      register: users_deleted
      ansible.builtin.user:
        name: "{{ item }}"
        state: absent
        force: yes
      loop: "{{ old_users_var }}"

    - name: Remove the old users' home directories
      ansible.builtin.file:
        path: "/home/{{ item }}"
        state: absent
      loop: "{{ old_users_var }}"

- name: Create groups
  ansible.builtin.group:
    name: "{{ item.key }}"
  loop: "{{ system.groups | dict2items | list }}"
  loop_control:
    label: "{{ item.key }}"

- name: Create users
  register: users_created
  ansible.builtin.user:
    name: "{{ item.key }}"
    comment: "{{ item.full_name | default(omit, true) }}"
    groups: >-
      {{
      item.value.groups |
      default({}, true) |
      dict2items |
      selectattr('value', 'eq', true) |
      map(attribute='key') |
      list
      }}
    append: yes
    shell: "{{ item.value.shell | default(which_bash.stdout, true) }}"
  loop: "{{ system.users | dict2items | list }}"
  loop_control:
    label: "{{ item.key }}"

- name: Sync the list of current users to the target host
  changed_when: users_created.changed or users_deleted.changed
  ansible.builtin.setup: {}
