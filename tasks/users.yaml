---
- name: Check if the list of users from the previous run exists
  ansible.builtin.stat:
    path: "{{ system.prefix.sudoers }}/zz-ansible-users.list"
  register: old_users

- name: Handle the automatic old users deletion
  when: old_users.stat.exists
  block:
    - name: Fetch old users list
      ansible.builtin.slurp:
        path: "{{ system.prefix.sudoers }}/zz-ansible-users.list"
      register: old_users_contents

    - name: Specify the users to be deleted automatically
      ansible.builtin.set_fact:
        old_users_from_file: "{{ old_users_contents.content | b64decode | from_json | difference(system.users) }}"

- name: Specify the users to be deleted manually
  ansible.builtin.set_fact:
    # not really invalid - see https://github.com/ansible/ansible-lint/issues/4702
    # noqa jinja[invalid]
    old_users_var: "{{ (old_users_from_file | default([])) + system.users_delete }}"

- name: Delete the users specified for deletion
  when: (old_users_var | length > 0) and ansible_system != 'FreeBSD'
  block:
    - name: Fail if all users are about to be deleted
      when: system.users | length == 0
      ansible.builtin.fail:
        msg: |
          system['users'] is empty, which means that you're about to delete ALL USERS on your target host
          This is very dangerous and will most likely break your system.

    - name: Fail if the current Ansible user is about to get deleted
      when: (ansible_user | default("")) in old_users_var
      ansible.builtin.fail:
        msg: |
          User {{ ansible_user }} can not be removed, since it's being used to run the current Ansible playbook
          Please run the playbook with a different user to remove the user {{ ansible_user }}

    - name: Remove old users
      register: users_deleted
      ansible.builtin.user:
        name: "{{ item }}"
        state: absent
        force: yes
      loop: "{{ old_users_var }}"

    - name: Remove the old users' home directories
      ansible.builtin.file:
        path: "/home/{{ item }}"
        state: absent
      loop: "{{ old_users_var }}"

- name: Create groups
  ansible.builtin.group:
    name: "{{ item.key }}"
  loop: "{{ system.groups | dict2items | list }}"
  loop_control:
    label: "{{ item.key }}"

- name: Create users
  register: users_created
  ansible.builtin.user:
    name: "{{ item.key }}"
    comment: "{{ item.full_name | default(omit, true) }}"
    groups: >-
      {{
      item.value.groups |
      default({}, true) |
      dict2items |
      selectattr('value', 'eq', true) |
      map(attribute='key') |
      list
      }}
    append: yes
    shell: "{{ item.value.shell | default(which_bash.stdout, true) }}"
  loop: "{{ system.users | dict2items | list }}"
  loop_control:
    label: "{{ item.key }}"

- name: Copy a list of current users to the target host
  ansible.builtin.copy:
    dest: "{{ system.prefix.sudoers }}/zz-ansible-users.list"
    owner: root
    group: "{{ system.root_group }}"
    mode: 0644
    content: "{{ system.users }}"
